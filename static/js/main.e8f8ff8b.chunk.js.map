{"version":3,"sources":["pages/index.tsx","app/providers/with-router.tsx","app/providers/index.ts","app/index.tsx","reportWebVitals.ts","index.tsx","shared/config/envs.ts","shared/config/paths.ts"],"names":["TasksListPage","lazy","then","module","default","TaskDetailsPage","Routing","_jsxs","Switch","children","_jsx","Route","exact","path","component","Redirect","to","withProviders","compose","Router","BrowserRouter","basename","basePath","Suspense","fallback","Spin","delay","className","size","AppWithProviders","App","onPerfEntry","ReactDOM","render","React","StrictMode","document","getElementById","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","catch","console","log","getEnvVar","key","_process$env$key","undefined","process","Error","concat","API_URL","relativePath","homepage","split"],"mappings":"8LAIA,MAAMA,EAAgBC,gBAAK,IACzB,oDAAuBC,MAAMC,IAAM,CAAQC,QAASD,EAAOH,oBAEvDK,EAAkBJ,gBAAK,IAC3B,oDAAyBC,MAAMC,IAAM,CACnCC,QAASD,EAAOE,sBAIPC,EAAUA,IAEnBC,eAACC,IAAM,CAAAC,SAAA,CACLC,cAACC,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjCU,cAACC,IAAK,CAACC,OAAK,EAACC,KAAK,WAAWC,UAAWT,IACxCK,cAACK,IAAQ,CAACC,GAAG,S,6CCbZ,MCFMC,EAAgBC,KDG3BJ,GAEeK,IACbT,cAACU,IAAa,CAACC,SAAUC,IAASb,SAChCC,cAACa,WAAQ,CACPC,SAAUd,cAACe,IAAI,CAACC,MAAO,IAAKC,UAAU,UAAUC,KAAK,UAAWnB,SAE/DK,U,OERT,MAQae,EAAmBZ,GARpBa,IAERpB,cAAA,OAAKiB,UAAU,MAAKlB,SAClBC,cAACJ,EAAO,QCNkByB,MCGhCC,IAASC,OACPvB,cAACwB,IAAMC,WAAU,CAAA1B,SACfC,cAACmB,EAAgB,MAEnBO,SAASC,eAAe,SDNpBN,GAAeA,aAAuBO,UACxC,8BACGpC,MAAKqC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EAChDC,EAAOT,GACPU,EAAOV,GACPW,EAAOX,GACPY,EAAOZ,GACPa,EAAQb,EAAY,IAErBc,MAAMC,QAAQC,I,0nBEDrB,MAAMC,EAAaC,IAAiC,IAADC,EACjD,QAAyBC,IAArBC,qMAAYH,GACd,MAAM,IAAII,MAAM,gBAADC,OAAiBL,EAAG,iBAErC,OAAuB,QAAvBC,EAAOE,qMAAYH,UAAI,IAAAC,IAAI,EAAE,EAIlBK,EAAUP,EAAU,qBAGTA,EAAU,YCpBlC,MAAMQ,E,MAAeC,EAASC,MAAM,KAAK,GAC5BpC,EAAWkC,EAAY,IAAAF,OAAOE,EAAY,UAAML,C","file":"static/js/main.e8f8ff8b.chunk.js","sourcesContent":["// Either use @loadable/component, within the tutorial - not critical\nimport { lazy, type ReactElement } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nconst TasksListPage = lazy(() =>\n  import(\"./tasks-list\").then((module) => ({ default: module.TasksListPage }))\n);\nconst TaskDetailsPage = lazy(() =>\n  import(\"./task-details\").then((module) => ({\n    default: module.TaskDetailsPage,\n  }))\n);\n\nexport const Routing = (): ReactElement => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={TasksListPage} />\n      <Route exact path=\"/:taskId\" component={TaskDetailsPage} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n};\n","import { Suspense, ReactNode, ReactElement } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { basePath } from \"shared/config\";\nimport { Spin } from \"shared/ui\";\n\nexport const withRouter = (\n  component: () => ReactNode\n): (() => ReactElement) => {\n  const Router = () => (\n    <BrowserRouter basename={basePath}>\n      <Suspense\n        fallback={<Spin delay={300} className=\"overlay\" size=\"large\" />}\n      >\n        {component()}\n      </Suspense>\n    </BrowserRouter>\n  );\n\n  return Router;\n};\n","import compose from \"compose-function\";\nimport { withRouter } from \"./with-router\";\n\nexport const withProviders = compose(withRouter);\n","import { type ReactNode } from \"react\";\nimport { Routing } from \"pages\";\nimport { withProviders } from \"./providers\";\nimport \"./index.scss\";\n\nconst App = (): ReactNode => {\n  return (\n    <div className=\"app\">\n      <Routing />\n    </div>\n  );\n};\n\nexport const AppWithProviders = withProviders(App);\n","import { type ReportHandler } from \"web-vitals\";\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\")\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch(console.log); // eslint-disable-line no-console\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppWithProviders } from \"app\";\nimport { reportWebVitals } from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWithProviders />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/**\n * Env-variables initialization module\n * @remark If the value of at least one variable is not found,\n * The application will immediately throw an error when initializing the module\n * @module\n */\n\n/**\n * Getting an env variable\n * @throwable\n */\nconst getEnvVar = (key: string): string | never => {\n  if (process.env[key] === undefined) {\n    throw new Error(`Env variable ${key} is required`);\n  }\n  return process.env[key] ?? \"\";\n};\n\n/** API entrypoint */\nexport const API_URL = getEnvVar(\"REACT_APP_API_URL\");\n\n/** Program start mode */\nexport const NODE_ENV = getEnvVar(\"NODE_ENV\");\n/** Development mode */\nexport const isDevEnv = NODE_ENV === \"development\";\n/** Production mode */\nexport const isProdEnv = NODE_ENV === \"production\";\n","import { homepage } from \"../../../package.json\";\n\nconst relativePath = homepage.split(\"/\")[3];\nexport const basePath = relativePath ? `/${relativePath}/` : undefined;\n"],"sourceRoot":""}